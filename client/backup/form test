"use client"

import React, { useState, useEffect } from "react"
import Web3 from "web3"
import PatientRegistryABI from "./artifacts/PatientRegistry.json"
import { useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import { formSchema, z } from "./formCustom/zodt"
import { Button } from "~/components/ui/button"
import { Input } from "~/components/ui/input"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "~/components/ui/select"
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "~/components/ui/form"
import { toast } from "~/hooks/use-toast"

const NewPatientForm: React.FC = () => {
  const [account, setAccount] = useState<string>('');
  const [loader, setLoader] = useState<boolean>(true);
  const [patientRegistry, setPatientRegistry] = useState<any>(null);
  const [loading, setLoading] = useState<boolean>(false)

  const [admin, setAdmin] = useState<string>('');
  const [patients, setPatients] = useState<any[]>([]);
  const [newPatient, setNewPatient] = useState({
      address: '',
      firstName: '',
      lastName: '',
      contactNumber: '',
      gender: '',
      cancerType: ''
  });
  useEffect(() => {
    loadWeb3()
    loadBlockchainData()
  }, [])

  const loadWeb3 = async () => {
    if (window.ethereum) {
      window.web3 = new Web3(window.ethereum)
      try {
        await window.ethereum.enable()
      } catch (error) {
        alert("User denied account access.")
      }
    } else {
      alert("Non-Ethereum browser detected. You should consider trying MetaMask!")
    }
  }

  const loadBlockchainData = async () => {
    const web3 = new Web3(window.ethereum)
    const accounts = await web3.eth.getAccounts()
    if (accounts.length === 0) {
      alert("No accounts found. Please ensure your wallet is connected.")
      return
    }
    setAccount(accounts[0]);

    const networkId = await web3.eth.net.getId()
    const networkData = PatientRegistryABI.networks[networkId]

    if (networkData) {
      const registry = new web3.eth.Contract(PatientRegistryABI.abi,networkData.address);
      setPatientRegistry(registry);

      const adminAddress = await registry.methods.admin().call();
      setAdmin(adminAddress);

      const patientCount = await registry.methods.getPatientCount().call();
      const patientList = [];

      for (let i = 0; i < patientCount; i++) {
        const patientAddress = await registry.methods.patientAddresses(i).call();
        const patient = await registry.methods.getPatient(patientAddress).call();
        patientList.push({ address: patientAddress, ...patient });
      }
      setPatients(patientList);
      setLoader(false);
    } else {
      alert("The smart contract is not deployed to the current network")
    }
  };

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      address: "",
      firstName: "",
      lastName: "",
      contactNumber: "",
      gender: "",
      cancerType: "",
    },
  })

  const registerPatient = async (values: z.infer<typeof formSchema>) => {
    if (!patientRegistry) {
      console.error("Contract is not initialized")
      return
    }

    setLoading(true)
    try {
      async () => {
        const { address, firstName, lastName, contactNumber, gender, cancerType } = newPatient;
        await patientRegistry.methods.registerPatient(address, firstName, lastName, contactNumber, gender, cancerType).send({ from: account });
        setNewPatient({ address: '', firstName: '', lastName: '', contactNumber: '', gender: '', cancerType: '' });
        loadBlockchainData();
      };

      if (loader) {
        return (
            <div>
                Loading....
            </div>
        );
      }
      console.log("Form Submitted!", values);
      toast({
        title: "New patient data submitted",
        description: "The form was submitted successfully.",
      })
      
    } catch (error) {
      console.error("Error submitting form:", error)
      toast({
        title: "Error",
        description: `There was an error submitting the form: ${error.message}`,
      })
    }
    setLoading(false)
  }

  return (
    <div className="max-w-2xl mx-auto p-4 bg-white shadow rounded-lg">
      <h1 className="text-2xl font-bold mb-6">New Cancer Patient Registration</h1>
      {loading && <div className="loading">Loading...</div>}
      <Form {...form}>
        <form onSubmit={form.handleSubmit(registerPatient)} className="space-y-8">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <FormField
              control={form.control}
              name="address"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Patient Address</FormLabel>
                  <FormControl>
                    <Input placeholder="0x..." {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="firstName"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>First name</FormLabel>
                  <FormControl>
                    <Input placeholder="First" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="lastName"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Last name</FormLabel>
                  <FormControl>
                    <Input placeholder="Last" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <FormField
              control={form.control}
              name="gender"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Gender</FormLabel>
                  <Select onValueChange={field.onChange} defaultValue={field.value}>
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Select gender" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      <SelectItem value="male">Male</SelectItem>
                      <SelectItem value="female">Female</SelectItem>
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="contactNumber"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Contact number</FormLabel>
                  <FormControl>
                    <Input placeholder="011-12345678" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
          <FormField
            control={form.control}
            name="cancerType"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Cancer Type</FormLabel>
                <Select onValueChange={field.onChange} defaultValue={field.value}>
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue placeholder="Select cancer type" />
                    </SelectTrigger>
                  </FormControl>
                  <SelectContent>
                    <SelectItem value="breast">Breast Cancer</SelectItem>
                    <SelectItem value="lung">Lung Cancer</SelectItem>
                    <SelectItem value="prostate">Prostate Cancer</SelectItem>
                    <SelectItem value="colorectal">Colorectal Cancer</SelectItem>
                    <SelectItem value="melanoma">Melanoma</SelectItem>
                    <SelectItem value="leukemia">Leukemia</SelectItem>
                    <SelectItem value="lymphoma">Lymphoma</SelectItem>
                    <SelectItem value="other">Other</SelectItem>
                  </SelectContent>
                </Select>
                <FormMessage />
              </FormItem>
            )}
          />
          <Button type="submit">Submit</Button>
        </form>
      </Form>
    </div>
  )
}

export default NewPatientForm
